Input Decaf Program:
class A {
 int x;
 A () {
 this.x = 0;
 }
 int f() {
 return this.x + 1;
 }
 public int g() {
 int i;
 i = this.f();
 i++;
 return i;
 }
}
class B extends A {
 int y;
 public A s;
 B () {
 this.y = 2;
 this.s = new A();
 }
 public int f(int k) {
 return super.f() + k;
 }
}

Output:

Class Name: A
Superclass Name:
Fields:
FIELD 1, x, A, private, instance, int
Constructors:
CONSTRUCTOR: 1, private
Constructor Parameters:
Variable Table:
Constructor Body:
Block([
Expr( Assign(Field-access(This, x), Constant(Integer-constant(0))) )
])
Methods:
METHOD: 1, f, A, private, instance, int
Method Parameters:
Variable Table:
Method Body:
Block([
Return( Binary(add, Field-access(This, x), Constant(Integerconstant(1))) )
])
METHOD: 2, g, A, public, instance, int
Method Parameters:
Variable Table:
VARIABLE 1, i, local, int
Method Body:
Block([
Expr( Assign(Variable(1), Method-call(This, f, [])) )
, Expr( Auto(Variable(1), inc, post) )
, Return( Variable(1) )
])
--------------------------------------------------------------------------
Class Name: B
Superclass Name: A
Fields:
FIELD 2, y, B, private, instance, int
FIELD 3, s, B, public, instance, user(A)
Constructors:
CONSTRUCTOR: 2, private
Constructor Parameters:
Variable Table:
Constructor Body:
Block([
Expr( Assign(Field-access(This, y), Constant(Integer-constant(2))) )
, Expr( Assign(Field-access(This, s), New-object(A, [])) )
])
Methods:
METHOD: 3, f, B, public, instance, int
Method Parameters: 1
Variable Table:
VARIABLE 1, k, formal, int
Method Body:
Block([
Return( Binary(add, Method-call(Super, f, []), Variable(1)) )
])